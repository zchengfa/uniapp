<template>
	<div class="video-detail">
		<div class="nav">
			<div class="back-box" @tap="back">
				<img src="../../static/images/back.png" class="back-img" alt="back">
			</div>
		</div>
		<swiper vertical="true" class="scroll-video" @change="change">
			<swiper-item v-for="(item,index) in MVData" :key="index">
				<div class="scroll-content swiper-item">
					<div class="scroll-item">
						<div class="video" :class="{'video-trans':isShowComments}" @tap="closeComments">
		
							<video style="width: 750rpx;" :id="'myVideo' + index" :src="item.url"
								:autoplay="item.autoplay" :poster="item.detail.cover ||item.detail.coverUrl" loop="true"
								objectFit="contain" @play="play(index)" @pause="pause(index)"
								@ended="videoEnded"></video>
		
						</div>
						<div class="video-info">
							<div class="info-top">
								<div class="operation">
									<div class="operation-item">
										<img src="../../static/images/like.png" alt="img" class="info-img" />
										<text class="item-text">{{dealCount(item.vInfo.likedCount)}}</text>
									</div>
									<div class="operation-item" @tap="showComments">
										<img src="../../static/images/comments.png" class="info-img" alt="img" />
										<text class="item-text">{{dealCount(item.vInfo.commentCount)}}</text>
									</div>
									<div class="operation-item">
		
										<img src="../../static/images/share.png" class="info-img" alt="img" />
										<text class="item-text">{{dealCount(item.vInfo.shareCount)}}</text>
									</div>
									<div class="operation-item">
										<img src="../../static/images/favorite.png" class="info-img" alt="img" />
										<text class="item-text">收藏</text>
									</div>
									<div class="operation-item song">
										<div class="pic-box" :class="item.playing ? 'rotate' : 'rotate paused'">
											<img :src="item.detail.cover ||item.detail.coverUrl" class="cover" />
										</div>
									</div>
								</div>
								<div class="info">
									<div class="artist-box info-item">
										<div class="artist-avatar" v-if="Number(vId)">
											<img class="artist-ava" v-for="(art,artIndex) in item.detail.artists"
												:src="art.img1v1Url" :key="artIndex" />
										</div>
										<div class="artist-avatar" v-else>
											<img class="artist-ava" :src="item.detail.avatarUrl" />
										</div>
										<text class="artist-name"
											v-if="Number(vId)">{{dealAuthor(item.detail.artists,'name')}}</text>
										<text class="artist-name" v-else>{{item.nickname}}</text>
									</div>
									<div class="mv-name-desc  info-item" @tap="showDesc(index)">
										<text class="tag" v-if="Number(vId)">MV</text>
										<text class="tag" v-else>视频</text>
										<text class="mv-name">{{item.detail.name || item.detail.title}}</text>
										<img src="../../static/images/angle.png" alt="angle" class="top-angle angle"
											v-if="!item.isShowDesc && (item.detail.desc || item.detail.description)" />
									</div>	

									<scroll-view scroll-y="true" class="desc-scroll" v-if="item.isShowDesc">
										<div class="desc-box">
											<text class="desc" @tap="showDesc(index)">{{item.detail.desc || item.detail.description}}</text>
											<img src="../../static/images/angle.png" alt="angle" class="bottom-angle angle" 
											 v-if="item.isShowDesc && (item.detail.desc || item.detail.description)" />
										</div>
									</scroll-view>
									<text class="publish-time">{{item.detail.publishTime}}</text>
								</div>
							</div>
						</div>
					</div>
				</div>
			</swiper-item>
		
		</swiper>
	</div>
</template>

<script>
	import {
		timeFormatting,dealAuthor,dealCount
	} from '../../utils/utils.js'
	import {
		vInfo,
		vUrl,
		vDetail,
		relatedMV,
		comments
	} from '../../common/api.js'
	export default {

		data() {
			return {
				MVData: [{
					url: '',
					detail: {},
					vInfo: {},
					isShowDesc: false,
					nickname: '',
					autoplay: true,
					playing: true
				}],
				loading: false,
				isShowComments: false,
				dataType: 1,
				//排序方式
				sortType: 3,
				//是否还有更多
				hasMore: undefined,
				//评论总数
				totalCount: 0,
				//评论
				comments: [],
				//上一页最后一条评论的时间（根据时间排序时获取更多评论需要用到）
				lastCursor: undefined,

				pageNo: 1,
				isShowReply: false,
				reply: {},
				vId: undefined,
				sortTypeList: [],
				user: {},
				ownerComment: {}
			}
		},
		methods: {
			//处理播放量
			dealCount ( count ) {
				if(count >=10000 && count < 100000000){
					return (count/10000).toFixed(2) + '万'
				}
				else if(count >= 100000000){
					return (count/100000000).toFixed(2) + '亿'
				}
				else{
					return count
				}
			},
			
			
			//处理歌曲作者
			dealAuthor ( authorArr = [] , arrProperty) {
				let author = ''
				let num = 0
				authorArr.map(item=>{
					author += item[arrProperty]+'/'
				})
				return author.substr(0,author.length-1)
			},
			init(id,index){
				this.getVDetail(id,index)
				this.getVUrl(id,index)
				this.getVInfo(id,index)
			},
			getVUrl(id,index){
				//获取mv地址
				vUrl(id).then(res=>{
					
					if (res.code === 200) {
						if (Number(id)) {
							this.MVData[index].url = res.data.url
						} else {
							this.MVData[index].url = res.urls[0].url
						}
					}
				})
			},
			getVDetail(id,index){
				
				//获取mv的点赞等信息
				vDetail(id).then(res=>{
					if (res.code === 200) {
						this.MVData[index].detail = res.data
					
						//处理时间
						this.MVData[index].detail && Number(this.MVData[index].detail.publishTime) ? this.MVData[
							index].detail.publishTime = timeFormatting('YYYY-MM-DD', this.MVData[index].detail
							.publishTime) : null
					
						if (!Number(id)) {
					
							this.MVData[index].nickname = res.data.creator.nickname
						}
						
					}
					
				})
			},
			getVInfo(id,index){
				//获取mv数据
				vInfo(id).then(res=>{
					if(res.code === 200){
						this.MVData[index].vInfo = res
						
					}
					
				})
			},
			back() {
				uni.navigateBack()
			},
			showComments(){
				this.isShowComments = true
				
			},
			closeComments(){
				this.isShowComments = false
			},
			showDesc(index) {
				this.MVData[index].isShowDesc = !this.MVData[index].isShowDesc
			},
			getRelMV(vId) {
				relatedMV(vId).then(res => {
					let data = Number(vId) ? data = res.mvs : data = res.data
					//console.log((data))
			
					data.map((item, index) => {
						this.MVData.push({
							url: '',
							detail: {},
							vInfo: {},
							isShowDesc: false,
							nickname: '',
							autoplay: false,
							playing: false
						})
						Number(vId) ? this.init(item.id, index + 1) : this.init(item.vid, index + 1)
			
					})
			
				})
			}
		},
		onLoad(options) {
			this.vId = options.vId
			Number(options.vId) ? this.dataType = 1 : this.dataType = 5;

			
			this.init(this.vId,0)
			this.getRelMV(options.vId)
			
		}
	}
</script>

<style scoped>
	.video-detail {
		position: relative;
		width: 750rpx;
		flex: 1;
		background-color: #000;
	}
	.nav{
		display: flex;
		flex-direction: row;
		justify-content: flex-start;
		align-items: center;
		width: 750rpx;
		height: 80px;
	}
	.back-box{
		width: 40px;
		height: 40px;
	}
	.back-img{
		display: flex;
		width: 40px;
		height:40px;
		
	}
	.comments {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 750rpx;
		height: 0;
		transition: height .5s ease-in-out;
		background-color: #fff;

	}

	.comments-trans {
		height: 600px;
		transition: height .5s ease-in-out;
	}

	.scroll-video,
	.scroll-item {
		flex: 1;
		
	}


	.video {
		margin-top: 200px;
		transition: margin-top .5s ease-in-out;
	}

	.video-trans {
		margin-top: 0;
		transition: margin-top .5s ease-in-out;
	}

	.info-bottom {
		height: 44px;
		background-color: #fff;

	}

	.input {
		height: 44px;
		color: #cecece;
		text-indent: 10px;
	}

	.url {
		color: red;
	}

	.text {
		margin-top: 4px;
		font-size: 14px;
		color: #fff;
	}

	.song {
		margin-top: 10px;
	}

	.pic-box {
		display: flex;
		justify-content: center;
		align-items: center;
		width: 50px;
		height: 50px;
		border-radius: 50%;
		background: url('../../static/images/song/disc.png');
		border: 1px solid #f00;
	}

	.cover {
		width: 30px;
		height: 30px;
		border-radius: 50%;
	}

	.avatar {
		width: 40px;
		height: 40px;
		border-radius: 50%;
	}

	.video-info {
		display: flex;
		flex-direction: row-reverse;
		justify-content: space-between;
		align-items: center;
	}

	.info-box {

		display: flex;
		justify-content: space-around;
		align-items: center;
		width: 70px;
		height: 340px;

	}

	.info-item {
		display: flex;
		justify-content: space-around;
		align-items: center;

		font-size: 14px;
	}

	.info {
		
		display: flex;
		justify-content: flex-end;
		align-items: flex-start;
		padding: 10px;
		flex: 1;
		width:600rpx;
		height: 374px;

	}

	.ava-container {
		flex: 1;
		display: flex;
		align-items: flex-start;
		justify-content: flex-end;
	}

	.info-item {

		display: flex;
		justify-content: center;
		align-items: center;
		padding-top: 10px;
		padding-bottom: 5px;
		font-size: 14px;
	}

	.artist-box {
		display: flex;
		flex-direction: row;
		justify-content: flex-start;
		align-items: center;
	}

	.artist-name {
		margin-left: 8px;
		color: #fff;
		font-size: 15px;
	}

	.video-info-img {
		display: inline-block;
		width: 32px;
		height: 32px;
		background-color: #000;
	}

	.mv-name-desc {
		margin-top: 10px;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: flex-start;
	}

	.mv-name {

		white-space: nowrap;
		text-overflow: ellipsis;
		text-align: left;
		overflow: hidden;
		color: #fff;
		font-size: 14px;
	}

	.tag {
		margin-right: 4px;
		padding: 0 2px;

		font-size: 12px;
		background-color: #999999;
		border-radius: 2px;
		color: #ff0000;
	}

	.angle {
		
		width: 16px;
		height: 16px;
		
	}
	.top-angle{
		margin-left: 6px;
	}
	.bottom-angle {
		
		transform: rotate(180deg);
	}

	.desc-box {

		text-align: left;
	}

	.desc {
		width: 280px;
		margin: 4px 0;
		color: #fff;

		font-size: 14px;
		text-align: left;
	}


	.publish-time {
		margin-top: 10px;
		color: #999999;
		font-size: 13px;

	}

	.input {
		text-indent: 20px;
		font-size: 14px;
	}
	.info-top{
		display: flex;
		flex-direction: row-reverse;
		align-items: center;
		justify-content: center;
	}
	.operation-item{
		margin-left: 10px;
		margin-right: 10px;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	.item-text{
		margin-top: 10px;
		color: #fff;
		font-size: 14px;
	}
	
	.info-img{
		margin-top: 10px;
		display: flex;
		width: 32px;
		height: 32px;
		background-color: red;
	}
	.artist-ava{
		display: flex;
		width: 40px;
		height: 40px;
		border-radius: 50%;
		background-color: red;
	}
	/* 评论 */
	.comments-container {
		position: relative;
		width: 750rpx;
		height: 600px;

	}
	
	.bottom-comment {
		position: absolute;
		left: 0;
		bottom: 0;
		width: 750rpx;
		height: 50px;
		background-color: #fff;
	}

</style>